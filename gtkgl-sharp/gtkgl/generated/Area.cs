// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkGL {

	using System;

	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Area : Gtk.DrawingArea {

		~Area()
		{
			Dispose();
		}

		protected Area(GLib.Type gtype) : base(gtype) {}
		public Area(IntPtr raw) : base(raw) {}

		[DllImport("gtkgl")]
		static extern IntPtr gtk_gl_area_new(int[] attrList);

		/// <summary> Area Constructor </summary>
		/// <remarks> To be completed </remarks>
		public Area(int[] attrList)
		{
			Raw = gtk_gl_area_new(attrList);
		}

		protected Area() : base(){}

		private Hashtable Signals = new Hashtable();
		[DllImport("gtkgl")]
		static extern int gtk_gl_area_make_current(IntPtr raw);

		/// <summary> MakeCurrent Method </summary>
		/// <remarks> To be completed </remarks>
		public int MakeCurrent() {
			int raw_ret = gtk_gl_area_make_current(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gtkgl")]
		static extern uint gtk_gl_area_get_type();

		/// <summary> GType Property </summary>
		/// <remarks> To be completed </remarks>
		public static new uint GType { 
			get {
				uint raw_ret = gtk_gl_area_get_type();
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtkgl")]
		static extern void gtk_gl_area_swap_buffers(IntPtr raw);

		/// <summary> SwapBuffers Method </summary>
		/// <remarks> To be completed </remarks>
		public void SwapBuffers() {
			gtk_gl_area_swap_buffers(Handle);
		}

#endregion
	}

}

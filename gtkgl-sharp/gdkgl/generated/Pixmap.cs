// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GdkGL {

	using System;

	using System.Collections;
	using System.Runtime.InteropServices;

		/// <summary> Pixmap Opaque Struct</summary>
		/// <remarks>
		/// </remarks>
#region Autogenerated code
	public class Pixmap : GLib.Opaque {

		[DllImport("gtkgl")]
		static extern void gdk_gl_pixmap_unref(IntPtr raw);

		/// <summary> Unref Method </summary>
		/// <remarks> To be completed </remarks>
		public void Unref() {
			gdk_gl_pixmap_unref(Handle);
		}

		[DllImport("gtkgl")]
		static extern int gdk_gl_pixmap_make_current(IntPtr raw, IntPtr context);

		/// <summary> MakeCurrent Method </summary>
		/// <remarks> To be completed </remarks>
		public int MakeCurrent(GdkGL.Context context) {
			int raw_ret = gdk_gl_pixmap_make_current(Handle, context.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gtkgl")]
		static extern IntPtr gdk_gl_pixmap_ref(IntPtr raw);

		/// <summary> Ref Method </summary>
		/// <remarks> To be completed </remarks>
		public GdkGL.Pixmap Ref() {
			IntPtr raw_ret = gdk_gl_pixmap_ref(Handle);
			GdkGL.Pixmap ret = (GdkGL.Pixmap) GLib.Opaque.GetOpaque(raw_ret);
			if (ret == null) ret = new GdkGL.Pixmap(raw_ret);
			return ret;
		}

		public Pixmap(IntPtr raw) : base(raw) {}

		[DllImport("gtkgl")]
		static extern IntPtr gdk_gl_pixmap_new(IntPtr visual, IntPtr pixmap);

		/// <summary> Pixmap Constructor </summary>
		/// <remarks> To be completed </remarks>
		public Pixmap(Gdk.Visual visual, Gdk.Pixmap pixmap)
		{
			Raw = gdk_gl_pixmap_new(visual.Handle, pixmap.Handle);
		}

		protected Pixmap() : base(){}

#endregion
	}

}

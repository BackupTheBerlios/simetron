package com.olympum.cibeles.engine.core;
/*
 * Cibeles - Workflow Engine
 * 
 * Copyright (c) 2002-2003, The Olympum Group, http://www.olympum.com/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. 
 *
 * - Redistributions in binary form must reproduce the above copyright notice, 
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution. 
 *
 * - Neither the name of The Olympum Group nor the names of its contributors 
 * may be used to endorse or promote products derived from this software without 
 * specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

import java.util.ArrayList;
import java.util.HashMap;

final class Process extends ExecutionObject implements StateEventListener {
	private ArrayList execObjects;
	private HashMap backwardTransitions;
	private HashMap forwardTransitions;

	Process(String name, String[] portNames) {
		super(name, portNames);
		execObjects = new ArrayList();
		forwardTransitions = new HashMap();
		backwardTransitions = new HashMap();
	}

	public void onStateChange(
		ExecutionObject source,
		StateEventInfo sEvent) {
		// only interested in the events from NOT_RUNNING to RUNNING
		connect(source);
		startExecution(source);

	}

	private void connect(ExecutionObject execObject) {
		ArrayList fTransitions = getForwardTransitions(execObject);
		for (int i = fTransitions.size(); i-- > 0;) {
			Transition t = (Transition) fTransitions.get(i);
			t.connect();
		}
	}

	void reset() {
		super.reset();
		for (int i = execObjects.size(); i-- > 0;) {
			ExecutionObject execObj =
				(ExecutionObject) execObjects.get(i);
			execObj.reset();
		}
	}

	void addExecutionObject(ExecutionObject obj) {
		if (!execObjects.contains(obj)) {
			execObjects.add(obj);
			// subscribe to the events generated by obj
			obj.setListener(this);
		}
	}

	ExecutionObject getExecutionObject(String name) {
		ExecutionObject forReturn = null;
		for (int i = execObjects.size(); i-- > 0;) {
			ExecutionObject execObject =
				(ExecutionObject) execObjects.get(i);
			if (execObject.getName().equals(name)) {
				forReturn = execObject;
				break;
			}
		}
		return forReturn;
	}

	void addTransition(Transition transition) {
		// find whether the fromExecutionObject already has an entry
		// in the forward map. If it doesn't
		// create an array and add this Transition to the array
		ExecutionObject fromObject = transition.getFromObject();
		ArrayList downTransitions =
			(ArrayList) forwardTransitions.get(fromObject);
		if (downTransitions == null) {
			downTransitions = new ArrayList();
			forwardTransitions.put(fromObject, downTransitions);
		}
		// check if it does exist already
		if (!downTransitions.contains(transition)) {
			downTransitions.add(transition);
		}

		// find whether the toExecutionObject already has an entry
		// in the backward map. If it doesn't
		// create an array and add this Transition to the array
		ExecutionObject toObject = transition.getToObject();
		ArrayList upTransitions =
			(ArrayList) backwardTransitions.get(toObject);
		if (upTransitions == null) {
			upTransitions = new ArrayList();
			backwardTransitions.put(toObject, upTransitions);
		}
		if (!upTransitions.contains(transition)) {
			upTransitions.add(transition);
		}
	}

	private ArrayList getForwardTransitions(ExecutionObject obj) {
		return (ArrayList) forwardTransitions.get(obj);
	}

	private ArrayList getBackwardTransitions(ExecutionObject obj) {
		return (ArrayList) backwardTransitions.get(obj);
	}

	void startExecution() {
		setState(State.RUNNING);
		connect(this);
		startExecution(this);
		setState(State.COMPLETED);
	}

	private void startExecution(ExecutionObject source) {
		// look up the followers of this node
		ArrayList fTransitions = getForwardTransitions(source);
		ExecutionObject fobj;
		Transition fTran;
		for (int fTIndex = fTransitions.size(); fTIndex-- > 0;) {
			fTran = (Transition) fTransitions.get(fTIndex);
			fobj = (ExecutionObject) fTran.getToObject();
			// only objects that are not running can be started
			if (!fobj.isNotRunning()) {
				continue;
			}
			// an object is ready to be started if all the
			// backward nodes are completed
			// the only exception is if the backward node is the
			// process itself (we would never get started)
			ArrayList bTransitions = getBackwardTransitions(fobj);
			boolean ready_to_start = true;
			Transition btran;
			for (int bTIndex = bTransitions.size();
				bTIndex-- > 0;
				) {
				btran = (Transition) bTransitions.get(bTIndex);
				//if one backward node is not completed
				//then stop iterating
				ExecutionObject bobj = btran.getFromObject();
				State state = bobj.getState();
				if (state != State.COMPLETED && bobj != this) {
					ready_to_start = false;
					break;
				}
			}
			if (ready_to_start) {
				fobj.startExecution();
			}
		}
	}
}
